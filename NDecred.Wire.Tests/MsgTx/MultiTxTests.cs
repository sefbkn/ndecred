using NDecred.Wire;

namespace NDecred.Network.Tests
{
    public partial class MsgTxTests
    {
        private class MultiTxTestSubject : MsgTxTestSubject
        {
            public override byte[] EncodedMessage => new byte[]
            {
                0x01, 0x00, 0x00, 0x00, // Version [0]
                0x01, // Varint for number of input transactions [4]
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // [5]
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Previous output hash
                0xff, 0xff, 0xff, 0xff, // Previous output index [37]
                0x00, // Previous output tree [41]
                0xff, 0xff, 0xff, 0xff, // Sequence [42]
                0x02, // Varint for number of output transactions [46]
                0x00, 0xf2, 0x05, 0x2a, 0x01, 0x00, 0x00, 0x00, // Transaction amount [47]
                0xab, 0xab, // Script version [55]
                0x43, // Varint for length of pk script [57]
                0x41, // OP_DATA_65 [58]
                0x04, 0xd6, 0x4b, 0xdf, 0xd0, 0x9e, 0xb1, 0xc5,
                0xfe, 0x29, 0x5a, 0xbd, 0xeb, 0x1d, 0xca, 0x42,
                0x81, 0xbe, 0x98, 0x8e, 0x2d, 0xa0, 0xb6, 0xc1,
                0xc6, 0xa5, 0x9d, 0xc2, 0x26, 0xc2, 0x86, 0x24,
                0xe1, 0x81, 0x75, 0xe8, 0x51, 0xc9, 0x6b, 0x97,
                0x3d, 0x81, 0xb0, 0x1c, 0xc3, 0x1f, 0x04, 0x78,
                0x34, 0xbc, 0x06, 0xd6, 0xd6, 0xed, 0xf6, 0x20,
                0xd1, 0x84, 0x24, 0x1a, 0x6a, 0xed, 0x8b, 0x63,
                0xa6, // 65-byte pubkey
                0xac, // OP_CHECKSIG
                0x00, 0xe1, 0xf5, 0x05, 0x00, 0x00, 0x00, 0x00, // Transaction amount [123]
                0xbc, 0xbc, // Script version [134]
                0x43, // Varint for length of pk script [136]
                0x41, // OP_DATA_65
                0x04, 0xd6, 0x4b, 0xdf, 0xd0, 0x9e, 0xb1, 0xc5,
                0xfe, 0x29, 0x5a, 0xbd, 0xeb, 0x1d, 0xca, 0x42,
                0x81, 0xbe, 0x98, 0x8e, 0x2d, 0xa0, 0xb6, 0xc1,
                0xc6, 0xa5, 0x9d, 0xc2, 0x26, 0xc2, 0x86, 0x24,
                0xe1, 0x81, 0x75, 0xe8, 0x51, 0xc9, 0x6b, 0x97,
                0x3d, 0x81, 0xb0, 0x1c, 0xc3, 0x1f, 0x04, 0x78,
                0x34, 0xbc, 0x06, 0xd6, 0xd6, 0xed, 0xf6, 0x20,
                0xd1, 0x84, 0x24, 0x1a, 0x6a, 0xed, 0x8b, 0x63,
                0xa6, // 65-byte signature
                0xac, // OP_CHECKSIG
                0x00, 0x00, 0x00, 0x00, // Lock time [203]
                0x00, 0x00, 0x00, 0x00, // Expiry [207]
                0x01, // Varint for number of input signature [211]
                0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, // ValueIn [212]
                0x15, 0x15, 0x15, 0x15, // BlockHeight [220]
                0x34, 0x34, 0x34, 0x34, // BlockIndex [224]
                0x07, // Varint for length of signature script [228]
                0x04, 0x31, 0xdc, 0x00, 0x1b, 0x01, 0x62 // Signature script [229]
            };

            public override MsgTx Message => new MsgTx
            {
                Version = 1,
                SerializationType = TxSerializeType.TxSerializeFull,
                TxIn = new[]
                {
                    new TxIn
                    {
                        Sequence = 0xffffffff,
                        ValueIn = 0x1212121212121212,
                        PreviousOutPoint = new OutPoint(new byte[32], 0xffffffff, 0),
                        BlockHeight = 0x15151515,
                        BlockIndex = 0x34343434,
                        SignatureScript = new byte[] {0x04, 0x31, 0xdc, 0x00, 0x1b, 0x01, 0x62}
                    }
                },
                TxOut = new[]
                {
                    new TxOut(
                        0x12a05f200,
                        0xabab,
                        new byte[]
                        {
                            0x41, // OP_DATA_65
                            0x04, 0xd6, 0x4b, 0xdf, 0xd0, 0x9e, 0xb1, 0xc5,
                            0xfe, 0x29, 0x5a, 0xbd, 0xeb, 0x1d, 0xca, 0x42,
                            0x81, 0xbe, 0x98, 0x8e, 0x2d, 0xa0, 0xb6, 0xc1,
                            0xc6, 0xa5, 0x9d, 0xc2, 0x26, 0xc2, 0x86, 0x24,
                            0xe1, 0x81, 0x75, 0xe8, 0x51, 0xc9, 0x6b, 0x97,
                            0x3d, 0x81, 0xb0, 0x1c, 0xc3, 0x1f, 0x04, 0x78,
                            0x34, 0xbc, 0x06, 0xd6, 0xd6, 0xed, 0xf6, 0x20,
                            0xd1, 0x84, 0x24, 0x1a, 0x6a, 0xed, 0x8b, 0x63,
                            0xa6, // 65-byte signature
                            0xac // OP_CHECKSIG
                        }
                    ),
                    new TxOut(
                        0x5f5e100,
                        0xbcbc,
                        new byte[]
                        {
                            0x41, // OP_DATA_65
                            0x04, 0xd6, 0x4b, 0xdf, 0xd0, 0x9e, 0xb1, 0xc5,
                            0xfe, 0x29, 0x5a, 0xbd, 0xeb, 0x1d, 0xca, 0x42,
                            0x81, 0xbe, 0x98, 0x8e, 0x2d, 0xa0, 0xb6, 0xc1,
                            0xc6, 0xa5, 0x9d, 0xc2, 0x26, 0xc2, 0x86, 0x24,
                            0xe1, 0x81, 0x75, 0xe8, 0x51, 0xc9, 0x6b, 0x97,
                            0x3d, 0x81, 0xb0, 0x1c, 0xc3, 0x1f, 0x04, 0x78,
                            0x34, 0xbc, 0x06, 0xd6, 0xd6, 0xed, 0xf6, 0x20,
                            0xd1, 0x84, 0x24, 0x1a, 0x6a, 0xed, 0x8b, 0x63,
                            0xa6, // 65-byte signature
                            0xac // OP_CHECKSIG
                        }
                    )
                }
            };
        }
    }
}