using System.Linq;
using NDecred.Common;
using NDecred.Wire;
using Xunit;

namespace NDecred.Network.Tests
{
    public class MsgBlockTests
    {
	    // Test data from dcrd
	    // https://github.com/decred/dcrd/blob/master/wire/msgblock_test.go
	    private readonly byte[] _testBlockBytes = 
	    {
		    // Begin block header
		    0x01, 0x00, 0x00, 0x00, // Version 1 [0]
		    0x6f, 0xe2, 0x8c, 0x0a, 0xb6, 0xf1, 0xb3, 0x72,
		    0xc1, 0xa6, 0xa2, 0x46, 0xae, 0x63, 0xf7, 0x4f,
		    0x93, 0x1e, 0x83, 0x65, 0xe1, 0x5a, 0x08, 0x9c,
		    0x68, 0xd6, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, // PrevBlock [4]
		    0x98, 0x20, 0x51, 0xfd, 0x1e, 0x4b, 0xa7, 0x44,
		    0xbb, 0xbe, 0x68, 0x0e, 0x1f, 0xee, 0x14, 0x67,
		    0x7b, 0xa1, 0xa3, 0xc3, 0x54, 0x0b, 0xf7, 0xb1,
		    0xcd, 0xb6, 0x06, 0xe8, 0x57, 0x23, 0x3e, 0x0e, // MerkleRoot [36]
		    0x98, 0x20, 0x51, 0xfd, 0x1e, 0x4b, 0xa7, 0x44,
		    0xbb, 0xbe, 0x68, 0x0e, 0x1f, 0xee, 0x14, 0x67,
		    0x7b, 0xa1, 0xa3, 0xc3, 0x54, 0x0b, 0xf7, 0xb1,
		    0xcd, 0xb6, 0x06, 0xe8, 0x57, 0x23, 0x3e, 0x0e, // StakeRoot [68]
		    0x00, 0x00, // VoteBits [100]
		    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // FinalState [102]
		    0x00, 0x00, // Voters [108]
		    0x00, // FreshStake [110]
		    0x00, // Revocations [111]
		    0x00, 0x00, 0x00, 0x00, // Poolsize [112]
		    0xff, 0xff, 0x00, 0x1d, // Bits [116]
		    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // SBits [120]
		    0x01, 0x00, 0x00, 0x00, // Height [128]
		    0x01, 0x00, 0x00, 0x00, // Size [132]
		    0x61, 0xbc, 0x66, 0x49, // Timestamp [136]
		    0x01, 0xe3, 0x62, 0x99, // Nonce [140]
		    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ExtraData [144]
		    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		    0x1e, 0xab, 0xa1, 0x5c, // StakeVersion
		    // Announce number of txs
		    0x01, // TxnCount [180]
		    // Begin bogus normal txs
		    0x01, 0x00, 0x00, 0x00, // Version [181]
		    0x01, // Varint for number of transaction inputs [185]
		    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Previous output hash [186]
		    0xff, 0xff, 0xff, 0xff, // Prevous output index [218]
		    0x00, // Previous output tree [222]
		    0xff, 0xff, 0xff, 0xff, // Sequence [223]
		    0x01, // Varint for number of transaction outputs [227]
		    0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, // Transaction amount [228]
		    0x98, 0x98, // Script version
		    0x43, // Varint for length of pk script
		    0x41, // OP_DATA_65
		    0x04, 0x96, 0xb5, 0x38, 0xe8, 0x53, 0x51, 0x9c,
		    0x72, 0x6a, 0x2c, 0x91, 0xe6, 0x1e, 0xc1, 0x16,
		    0x00, 0xae, 0x13, 0x90, 0x81, 0x3a, 0x62, 0x7c,
		    0x66, 0xfb, 0x8b, 0xe7, 0x94, 0x7b, 0xe6, 0x3c,
		    0x52, 0xda, 0x75, 0x89, 0x37, 0x95, 0x15, 0xd4,
		    0xe0, 0xa6, 0x04, 0xf8, 0x14, 0x17, 0x81, 0xe6,
		    0x22, 0x94, 0x72, 0x11, 0x66, 0xbf, 0x62, 0x1e,
		    0x73, 0xa8, 0x2c, 0xbf, 0x23, 0x42, 0xc8, 0x58,
		    0xee, // 65-byte signature
		    0xac, // OP_CHECKSIG
		    0x11, 0x11, 0x11, 0x11, // Lock time
		    0x22, 0x22, 0x22, 0x22, // Expiry
		    0x01, // Varint for number of signatures
		    0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, // ValueIn
		    0x17, 0x17, 0x17, 0x17, // BlockHeight
		    0x18, 0x18, 0x18, 0x18, // BlockIndex
		    0x07, // SigScript length
		    0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0xf2, // Signature script (coinbase)
		    // Announce number of stake txs
		    0x01, // TxnCount for stake tx
		    // Begin bogus stake txs
		    0x01, 0x00, 0x00, 0x00, // Version
		    0x01, // Varint for number of transaction inputs
		    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Previous output hash
		    0xff, 0xff, 0xff, 0xff, // Prevous output index
		    0x01, // Previous output tree
		    0xff, 0xff, 0xff, 0xff, // Sequence
		    0x01, // Varint for number of transaction outputs
		    0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, // Transaction amount
		    0x12, 0x12, // Script version
		    0x43, // Varint for length of pk script
		    0x41, // OP_DATA_65
		    0x04, 0x96, 0xb5, 0x38, 0xe8, 0x53, 0x51, 0x9c,
		    0x72, 0x6a, 0x2c, 0x91, 0xe6, 0x1e, 0xc1, 0x16,
		    0x00, 0xae, 0x13, 0x90, 0x81, 0x3a, 0x62, 0x7c,
		    0x66, 0xfb, 0x8b, 0xe7, 0x94, 0x7b, 0xe6, 0x3c,
		    0x52, 0xda, 0x75, 0x89, 0x37, 0x95, 0x15, 0xd4,
		    0xe0, 0xa6, 0x04, 0xf8, 0x14, 0x17, 0x81, 0xe6,
		    0x22, 0x94, 0x72, 0x11, 0x66, 0xbf, 0x62, 0x1e,
		    0x73, 0xa8, 0x2c, 0xbf, 0x23, 0x42, 0xc8, 0x58,
		    0xee, // 65-byte signature
		    0xac, // OP_CHECKSIG
		    0x11, 0x11, 0x11, 0x11, // Lock time
		    0x22, 0x22, 0x22, 0x22, // Expiry
		    0x01, // Varint for number of signatures
		    0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, // ValueIn
		    0x14, 0x14, 0x14, 0x14, // BlockHeight
		    0x15, 0x15, 0x15, 0x15, // BlockIndex
		    0x07, // SigScript length
		    0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0xf2, // Signature script (coinbase)
	    };

	    [Fact]
	    public void EncodeDecode_ReproducesInputExactlyWhenReEncoded()
	    {
		    var subject = new MsgBlock();
		    subject.Decode(_testBlockBytes);
		    var result = subject.Encode();
		    
		    Assert.True(result.SequenceEqual(_testBlockBytes));
	    }

	    [Fact]
	    public void BlockHash_GivenKnownBlock_ReturnsExpectedBlockHash()
	    {
		    var expected = Hex.ToByteArray("6b73b6f6faebbfd6a541f38820593e43c50ce1abf64602ab8ac7d5502991c37f").Reverse();
		    var subject = new MsgBlock();
		    subject.Decode(_testBlockBytes);

		    var actual = subject.BlockHash();
		    Assert.True(expected.SequenceEqual(actual));
	    }

	    [Fact]
	    public void TxHashes_GivenKnownBlock_ReturnsExpectedHash()
	    {
		    var expected = Hex.ToByteArray("55a25248c04dd8b6599ca2a708413c00d79ae90ce075c54e8a967a647d7e4bea").Reverse();
		    var subject = new MsgBlock();
		    subject.Decode(_testBlockBytes);

		    var actual = subject.TxHashes().Single();
		    
		    Assert.True(expected.SequenceEqual(actual));
	    }
	    [Fact]
	    public void STxHashes_GivenKnownBlock_ReturnsExpectedHash()
	    {
		    var expected = Hex.ToByteArray("ae208a69f3ee088d0328126e3d9bef7652b108d1904f27b166c5999233a801d4").Reverse();
		    var subject = new MsgBlock();
		    subject.Decode(_testBlockBytes);

		    var actual = subject.STxHashes().Single();
		    Assert.True(expected.SequenceEqual(actual));
	    }
    }
}